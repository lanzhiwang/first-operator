pipeline{
    agent {label "golang-1.13"}

    stages{

        stage("alauda-all-in-one"){

            steps{
                script {
                    // ========= 从这里开始复制 =========
                    library "alauda-cicd"
                    def language = "golang"
                    AlaudaPipeline{
                        config = [
                            agent: 'golang-1.12',
                            folder: '.',
                            chart: [
                                chart: "test",
                                component: "test",
                            ],
                            scm: [
                                credentials: 'tdsql-zhihu'
                            ],
                            docker: [
                                repository: "tdsql/imoocpod-operator",
                                credentials: "tdsql-tdsql-harbor-b",
                                context: ".",
                                dockerfile: "build/Dockerfile",
                            ],
                            sonar: [
                                binding: "tdsql-son"
                            ],
                        ]
                        env = [
                            GO111MODULE: "on",
                            GOPROXY: "https://athens.alauda.cn,https://goproxy.cn,direct",
                        ]
                        steps = [
                            [
                                name: "Build",
                                container: language,
                                commands: [
                                    """make test
                                    make build""",
                                ]
                            ],
                        ]
                    }
                    // ========= 复制到这里 =========
                }
            }
        }
    }

    post{
        always{
            script{
                echo "clean up workspace"
                try {
                    deleteDir()
                }
                catch (err) {
                    echo err.getMessage()
                }
            }
        }
    }

}
